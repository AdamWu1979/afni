#!/bin/tcsh

# Make AFNI's help readable in a text editor again!
@global_parse `basename $0` "$*" ; if ($status) exit 0

# --------------------- revision history -------------------------
#
#set version   = "1.0";
#set rev_dat   = "some prior event in the spacetime continuum"
#   + RWC started and developed this program
#
#set version   = "1.1"; set rev_dat   = "May 18, 2018"
#   + PT started optionizing this program
#
#set version   = "1.1"; set rev_dat   = "July 1, 2018"
#   + fixed searching for path of dset, use explicit check first
#
#set version   = "1.2"; set rev_dat   = "July 5, 2018"
#   + set check if OMP_NUM_THREADS is explicitly set, so echoing don't
#     break it -- thanks P. Molfese et al.!
#
#set version   = "1.3"; set rev_dat   = "Jan 17, 2019"
#   + [PT] bug fix-- 3danisosmooth cmd was missing ${odir} on I/O
#
#set version   = "1.4"; set rev_dat   = "Feb 11, 2019"
#   + [PT] new opt: turn unifize off (e.g., it 'twere already done
#     before)
#
#set version   = "1.41"; set rev_dat   = "Feb 11, 2019"
#   + [PT] new opt: can turn skullstrip and/or anisosmooth off (e.g.,
#     it 'twere already done before)
#
#set version   = "1.42"; set rev_dat   = "Feb 11, 2019"
#   + [PT] rename the 'turn off skull strip' to a less potentially
#     confusing name: '-init_skullstr_off'.  (So it doesn't falsely
#     seem like *no* skullstripping at all would be done.)
#
#set version   = "1.43"; set rev_dat   = "Feb 21, 2019"
#   + [PT] include '-Urad 30' in unifizing part, for improving
#     final output-- thanks for careful code reading, Yoichi!
#
#set version   = "1.44"; set rev_dat   = "Mar 27, 2019"
#   + [RWC] add '-SSopt' option for adding options to 3dSkullStrip
#           (per the request of Allison Nugent)
#
#set version   = "1.45"; set rev_dat   = "Mar 29, 2019"
#   + [RWC] if SubID is a dataset name, funny things happened;
#           so edit out suffixes like '.nii', '.HEAD', etc.`
#
#set version   = "1.5"; set rev_dat   = "April 15, 2019"
#   + [PT] add in a couple new opts
#          "-giant_move": larger opening angle, etc.
#          "-deoblique":  can deoblique
# 
#set version   = "1.51"; set rev_dat   = "May 13, 2019"
#   + [PT] fixed help file for sphinxification: got rid of some
#          wandering "+" symbols in subheading titles
# 
set version   = "1.52"; set rev_dat   = "June 18, 2019"
#   + [RWC] add 3dAutomask step to clean up some of the
#           little junk at the edge of the brain
# 
# ----------------------------------------------------------------

# some AFNI environment variables

setenv AFNI_DONT_LOGFILE  YES
setenv AFNI_COMPRESSOR    NONE

# set number of threads if run via SLURM

if ( $?SLURM_CPUS_PER_TASK ) then
 setenv OMP_NUM_THREADS $SLURM_CPUS_PER_TASK
else if ( $?NSLOTS ) then
 setenv OMP_NUM_THREADS $NSLOTS
endif

# ===================================================================

set this_prog = "@SSwarper"

set Adataset = ""    # req/ input dataset
set SubID    = ""    # req/ the subject ID
set Basedset = ""    # req/ reference dset- must have 4 bricks
set odir     = ""    # opt/ output dir

set minp     = "11"  # opt/ the minimum warp patch size

set btemplate = '$btemplate'
set tpath     = '$tpath'
set subj      = '$subj'
set str_msg   = '`@FindAfniDsetPath $btemplate`'

set liteopt   = "-lite"
set tightness = 0
set doclean   = 1
set verbopt   = ""
set skipwarp  = 0

set DO_UNIFIZE = 1
set DO_SKULLST = 1
set DO_ANISO   = 1
set DO_GIANT   = 0
set DO_DEOB    = 0

set SSopt      = " "

# ------------------- process options, a la rr ----------------------

if ( $#argv == 0 ) goto SHOW_HELP

set ac = 1
while ( $ac <= $#argv )
    # terminal options
    if ( ("$argv[$ac]" == "-h" ) || ("$argv[$ac]" == "-help" )) then
        goto SHOW_HELP
    endif
    if ( "$argv[$ac]" == "-ver" ) then
        goto SHOW_VERSION
    endif

    # --------- required ---------------

    if ( "$argv[$ac]" == "-input" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set Adataset = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-subid" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set SubID = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-base" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set Basedset = "$argv[$ac]"

    # --------- optional ---------------

    # min patch
    else if ( "$argv[$ac]" == "-minp" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set minp = "$argv[$ac]"

    # [Jan 2019 - RWC]
    else if ( "$argv[$ac]" == "-nolite" ) then
        set liteopt = "-nolite"

    # [Jan 2019 - RWC]

    else if ( "$argv[$ac]" == "-tight" ) then
        @ tightness ++

    # [Jan 2019 - RWC]

    else if ( "$argv[$ac]" == "-noclean" ) then
        set doclean = 0

    # [PT: April 15, 2019]
    else if ( "$argv[$ac]" == "-giant_move" ) then
        set DO_GIANT = 1

    # [PT: April 15, 2019]
    else if ( "$argv[$ac]" == "-deoblique" ) then
        set DO_DEOB = 1

    # [Jan 2019 - RWC]

    else if ( "$argv[$ac]" == "-skipwarp" ) then
        set skipwarp = 1

    # [PT: Feb 11, 2019]
    else if ( "$argv[$ac]" == "-unifize_off" ) then
        set DO_UNIFIZE = 0

    # [PT: Feb 11, 2019]
    else if ( "$argv[$ac]" == "-init_skullstr_off" ) then
        set DO_SKULLST = 0

    # [PT: Feb 11, 2019]
    else if ( "$argv[$ac]" == "-aniso_off" ) then
        set DO_ANISO = 0

    # [Jan 2019 - RWC]

    else if ( "$argv[$ac]" == "-verb" ) then
        set verbopt = "-verb"

    # output dir
    else if ( "$argv[$ac]" == "-odir" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set odir = "$argv[$ac]"

    # 3dSkullStrip options for Allison [RWC: 27 Mar 2019]
    else if ( "$argv[$ac]" == "-SSopt" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set SSopt = "$argv[$ac]"

    # ---------- fin ------------------

    else
        echo "** unexpected option #$ac = '$argv[$ac]'"
        goto BAD_EXIT

    endif
    @ ac += 1
end

# ====================================================================

echo "++ Starting: $this_prog v$version"
if ( ! $?OMP_NUM_THREADS ) then
    set sss = `dirname $0`
    if ( -e $sss/afni_check_omp ) then
      set nnn = `$sss/afni_check_omp`
      echo "++ Default OMP_NUM_THREADS is $nnn"
      unset nnn
    else
      echo "++ OMP_NUM_THREADS is: not set by user, "
      echo "   so possibly just using one CPU, depending on system config"
    endif
    unset sss
else
    echo "++ OMP_NUM_THREADS set to $OMP_NUM_THREADS"
endif

if ( "$Adataset" == "" ) then
  echo "***** No -input option? :("
  goto BAD_EXIT
endif

if ( ! -f "$Adataset" ) then
  set chad = `@CheckForAfniDset "$Adataset"`
  if( "$chad" == "0" || "$chad" == "1" )then
    echo "***** ${this_prog} -- Not finding dset $Adataset -- exiting :(("
    goto BAD_EXIT
  endif
endif

if( "$SubID" == "" )then
  echo "***** ${this_prog} -- no subject ID entered with -subid? :("
  goto BAD_EXIT
endif

# edit SubID to remove any dataset suffixes [29 Mar 2019]
set sss = `basename "$SubID" .nii.gz`
set sss = `basename "$sss"   .nii`
set sss = `basename "$sss"   .`
set sss = `basename "$sss"   .HEAD`
set sss = `basename "$sss"   .BRIK.gz`
set sss = `basename "$sss"   .BRIK`
set sss = `basename "$sss"   +orig`
set sss = `basename "$sss"   +tlrc`

if ( "$sss" != "$SubID" ) then
  echo "++ Editing subject ID (-subid) $SubID to $sss"
  set SubID = "$sss"
endif
unset sss

# output dir from $Adataset, if not set by user
if ( "$odir" == "" ) then
    set odir = `dirname $Adataset`
    echo ""
    echo "++ Based on input, the output directory will be:"
    echo "     $odir"
    echo ""
endif

\mkdir -p ${odir}

# set random prefix for temp files

set pppp = "`3dnewid -fun11`"
set pref = $odir/junk.SSwarper.${pppp}_

# ---------------------------- !! this will change !! -------------------
#### ----> also add check that it has multiple subbricks

## find the base template dataset: start by seeing if it has been
## given directly (not just needing @Find*Path):
if ( -e "$Basedset" ) then
    set tpath = `dirname "$Basedset"`
else
    set tpath = `@FindAfniDsetPath "$Basedset"`
    if( "$tpath" == '' ) then
        echo "** ${this_prog} -- Failed to find template $Basedset -- exiting :("
        goto BAD_EXIT
    endif
    set Basedset = $tpath/$Basedset
endif

## Require it to have enough bricks to really be a ref
set nvolbase = `3dinfo -nv "$Basedset"`
if ( $nvolbase < 5 ) then
    echo "** Base $Basedset only has $nvolbase volumes:"
    echo "   to serve as a reference for $this_prog, it needs 4!"
    echo "   See '$this_prog -help' -> 'The Template Dataset' for more info"
    goto BAD_EXIT
endif

# --------------------------------------------------------------------

## start the work

## Step #0: Deoblique
if ( ${DO_DEOB} ) then
    set dset_do = $odir/anatDO."${SubID}".nii
    3dWarp                        \
        -deoblique                \
        -wsinc5                   \
        -prefix "${dset_do}"      \
        "$Adataset"
    # ... and this will be new "input" dset
    set Adataset = "${dset_do}"
endif

## Step #1: Unifize the input T1

# [PT: Feb 11, 2019] now allows for option *not* to unifize
# [PT: Feb 21, 2019] use Urad=30 when unifizing (better for final output)
if( ! -f $odir/anatU."${SubID}".nii ) then
    if ( ${DO_UNIFIZE} ) then
        3dUnifize                             \
            -GM                               \
            -clfrac 0.4                       \
            -Urad 30                          \
            -prefix $odir/anatU."$SubID".nii  \
            -input "$Adataset"
    else
        echo "++ NOT unifizing dset."
        3dcopy                                \
            "$Adataset"                       \
            $odir/anatU."$SubID".nii
    endif
endif

# [PT: Feb 11, 2019] now allows for option *not* to anismoothize
if( ! -f $odir/anatUA."${SubID}".nii ) then
    if ( ${DO_ANISO} ) then
        3danisosmooth                           \
            -iters 1                            \
            -3D                                 \
            -automask                           \
            -noneg                              \
            -prefix $odir/anatUA."${SubID}".nii \
            $odir/anatU."${SubID}".nii
    else
        echo "++ NOT anisosmoothing dset."
        3dcopy                                  \
            $odir/anatU."$SubID".nii            \
            $odir/anatUA."$SubID".nii
    endif
endif

# Step #2: Strip Skull (Ziad's way)

# [PT: Feb 11, 2019] now allows for option *not* to skullstrip (e.g.,
# for macaque data)
if( ! -f $odir/anatS."${SubID}".nii ) then
    if ( ${DO_SKULLST} ) then
        3dSkullStrip \
            -input  $odir/anatUA."$SubID".nii \
            -prefix $odir/anatS."$SubID".nii  \
            -debug 1 -ld 33 -niter 777        \
            -shrink_fac_bot_lim 0.777         \
            -exp_frac 0.0666 -orig_vol        \
            $SSopt
    else
        echo "++ NOT pre-skullstripping dset."
        3dcopy                                \
            $odir/anatUA."$SubID".nii         \
            $odir/anatS."$SubID".nii
    endif
endif

## Step #3: run 3dQwarp first time to a moderate level (skull on)
if ( ${DO_GIANT} ) then
    3dQwarp -echo_edu                                     \
        $liteopt $verbopt                                 \
        -base   "${Basedset}[1]"                          \
        -source $odir/anatUA."$SubID".nii                 \
        -weight "${Basedset}[2]"                          \
        -allineate -noneg -maxlev 5 -iwarp -awarp         \
        -workhard:3:5                                     \
        -prefix "${pref}TAL5.nii"                         \
        -allopt '-twobest 11 -twopass -maxrot 45 -maxshf 40 -source_automask+2 -cmass'
else
    3dQwarp -echo_edu                                     \
        $liteopt $verbopt                                 \
        -base   "${Basedset}[1]"                          \
        -source $odir/anatUA."$SubID".nii                 \
        -weight "${Basedset}[2]"                          \
        -allineate -noneg -maxlev 5 -iwarp -awarp         \
        -workhard:3:5                                     \
        -prefix "${pref}TAL5.nii"
endif

## Step #4: mask off the skull using the template (second skull-strip)

3dmask_tool                        \
    -input "${Basedset}[3]"        \
    -dilate_input 2                \
    -prefix "${pref}MASK.nii"

3dcalc                             \
    -a "${pref}MASK.nii"           \
    -b "${pref}TAL5.nii"           \
    -expr 'step(a)*b'              \
    -prefix "${pref}TAL5mm.nii"

## Step #5: warp this masked dataset back to original space

3dNwarpApply \
    -nwarp "${pref}TAL5_WARPINV.nii"   \
    -master $odir/anatS."$SubID".nii   \
    -source "${pref}TAL5mm.nii"        \
    -prefix "${pref}TAL5ww.nii"

## warp the mask itself (dilated) back to orig space

\rm -f "${pref}MASK.nii"
3dmask_tool                      \
    -input "${Basedset}[3]"      \
    -dilate_input 3              \
    -prefix "${pref}MASK.nii"
3dNwarpApply \
    -nwarp "${pref}TAL5_WARPINV.nii"   \
    -master $odir/anatS."$SubID".nii   \
    -source "${pref}MASK.nii"          \
    -prefix "${pref}MASKO.nii"         \
    -ainterp NN

## merge these backward warped datasets with the 3dSkullStrip
## output to get a better original skull-stripped result

3dcalc -a "$odir/anatS.${SubID}.nii"  \
       -b "${pref}TAL5ww.nii"         \
       -c "${pref}MASKO.nii"          \
       -expr 'step(c)*max(a,b)'       \
       -prefix "$odir/anatSS.${SubID}.nii"

# DRG's erode-dilate trick for cleanup of little crap [16 Jan 2019]
3dmask_tool                           \
    -dilate_inputs -3 3               \
    -prefix ${pref}de3.nii            \
    -input  "$odir/anatSS.${SubID}.nii"
3dcalc                                \
    -a "$odir/anatSS.${SubID}.nii"    \
    -b ${pref}de3.nii                 \
    -expr 'a*step(b)'                 \
    -prefix "$odir/anatSSc.${SubID}.nii"

# Throw in an automask step to clean up the outer edges [18 Jun 2019]
\rm -f ${pref}de3.nii "$odir/anatSS.${SubID}.nii"
3dAutomask -apply_prefix "$odir/anatSSd.${SubID}.nii" "$odir/anatSSc.${SubID}.nii"
\mv -f "$odir/anatSSd.${SubID}.nii" "$odir/anatSS.${SubID}.nii"
\rm -f "$odir/anatSSc.${SubID}.nii"

# don't do any more if skipping the final (precision) warp

if( $skipwarp ) goto CLEANUP

## Step #6: affine transform that result to template space

3dAllineate \
    -1Dmatrix_apply "${pref}TAL5_Allin.aff12.1D"   \
    -source $odir/anatSS."${SubID}".nii            \
    -master "${pref}TAL5mm.nii"                    \
    -final wsinc5                                  \
    -prefix "${pref}AffSS.nii"

## warp to template space (skull off),
## initializing using the previous 3dQwarp -awarp output

# Run 3dQwarp in several segments, to avoid gcc OpenMP bug
#  where it freezes sometimes with inter-thread conflicts;
#  this happens only in long runs, so breaking the run
#  into pieces will (I hope) elide this annoyance - RWC :(

# Piece number 1
3dQwarp $liteopt $verbopt                \
    -base "${Basedset}[0]"               \
    -source "${pref}AffSS.nii"           \
    -iniwarp "${pref}TAL5_AWARP.nii"     \
    -inilev 1 -maxlev 5                  \
    -pblur -workhard:5:5                 \
    -nodset -prefix "${pref}QQ5.nii"

# Piece number 2
3dQwarp $liteopt $verbopt                \
    -base "${Basedset}[0]"               \
    -source "${pref}AffSS.nii"           \
    -iniwarp "${pref}QQ5_WARP.nii"       \
    -inilev 6 -maxlev 7 -workhard:6:7    \
    -pblur                               \
    -nodset -prefix "${pref}QQ7.nii"

if( $minp > 13 )then
# Final piece for coarse final patch size
  3dQwarp $liteopt $verbopt                \
      -base "${Basedset}[0]"               \
      -source "${pref}AffSS.nii"           \
      -iniwarp "${pref}QQ7_WARP.nii"       \
      -inilev 8                            \
      -pblur -minpatch $minp               \
      -Qfinal                              \
      -prefix $odir/anatQQ."${SubID}".nii
else
# Penultimate piece for refined final patch size
  @ mpp = $minp + 6
  3dQwarp $liteopt $verbopt                \
      -base "${Basedset}[0]"               \
      -source "${pref}AffSS.nii"           \
      -iniwarp "${pref}QQ7_WARP.nii"       \
      -inilev 8 -minpatch $mpp             \
      -pblur                               \
      -nodset -prefix "${pref}QQ9.nii"
# Ultimate piece for refined final patch size
  3dQwarp $liteopt $verbopt                \
      -base "${Basedset}[0]"               \
      -source "${pref}AffSS.nii"           \
      -iniwarp "${pref}QQ9_WARP.nii"       \
      -inilev 10                           \
      -pblur -minpatch $minp               \
      -prefix $odir/anatQQ."${SubID}".nii
endif

# DRG's erode-dilate trick for cleanup of little crap [16 Jan 2019]
3dmask_tool                             \
    -dilate_inputs -1 1                 \
    -prefix ${pref}de3.nii              \
    -input  $odir/anatQQ."${SubID}".nii
3dcalc                                  \
    -a $odir/anatQQ."${SubID}".nii      \
    -b ${pref}de3.nii                   \
    -expr 'a*step(b)'                   \
    -prefix $odir/anatQQc."${SubID}".nii

\rm -f ${pref}de3.nii anatQQ."${SubID}".nii
\mv -f $odir/anatQQc."${SubID}".nii $odir/anatQQ."${SubID}".nii

## Step #7: Make two pretty pictures, and scram

@snapshot_volreg $odir/anatQQ."${SubID}".nii $Basedset $odir/AM"${SubID}"
@snapshot_volreg $Basedset $odir/anatQQ."${SubID}".nii $odir/MA"${SubID}"

## Clean up the junk

CLEANUP:

## Rename affine warp matrix

\mv -f "${pref}TAL5_Allin.aff12.1D" $odir/anatQQ."${SubID}".aff12.1D

if ( $doclean ) then
  \rm -f "${pref}"*
endif

goto GOOD_EXIT

# ========================================================================
# ========================================================================

SHOW_HELP:

cat <<EOF

OVERVIEW ~1~

This script has dual purposes for processing a given subject's
anatomical volume:
    + to skull-strip the brain, and
    + to calculate the warp to a reference template/standard space.
Automatic snapshots of the registration are created, as well, to help
the QC process.

This program cordially ties in directly with afni_proc.py, so you can
run it beforehand, check the results, and then provide both the
skull-stripped volume and the warps to the processing program.  That
is convenient!

Current version = $version
Authorship      = RW Cox

# -----------------------------------------------------------------

USAGE ~1~

    ${this_prog}          \
        -input  AA        \
        -base   BB        \
        -subid  SS        \
       {-odir   OD}       \
       {-minp   MP}       \
       {-nolite}          \
       {-skipwarp}        \
       {-unifize_off}     \
       {-init_skullstr_off}  \
       {-SSopt 'strings'  \
       {-aniso_off}       \
       {-verb}            \
       {-noclean}

where:

  -input  AA :(req) an anatomical dataset, *not* skull-stripped, with
              resolution about 1 mm.

  -base   BB :(req) a base template dataset, with contrast similar to
              the input AA dset, probably from some kind of standard
              template.
              NB: this dataset is not *just* a standard template,
              because it is not a single volume-- read about its
              composition in the NOTES on the 'The Template Dataset',
              below.
              The program first checks if the dset BB exists as
              specified; if not, then if just the filename has been
              provided it searches the AFNI_GLOBAL_SESSION,
              AFNI_PLUGINPATH, and afni bin directory (in that order)
              for the named dataset.

  -subid  SS :(req) name code for output datasets (e.g., 'sub007').

  -odir   OD :(opt) output directory for all files from this program
              (def: directory of the '-input AA').

  -minp   MP :(opt) minimum patch size on final 3dQwarp (def: 11).

  -nolite    :(opt) Do not use the '-lite' option with 3dQwarp;
              This option is used for backward compatibility, if you want
              to run 3dQwarp the same way as older versions of @SSwarper.
              The new way (starting Jan 2019) is to use the '-lite'
              option with 3dQwarp to speed up the calculations.
              (def: use '-lite' for faster calculations).

  -skipwarp  :(opt) Do not compute past the output of anatSS.{subid}.nii.
              This option is used if you just want the skull-stripped
              result in original coordinates, without the warping
              to the template space (anatQQ). The script will run faster.

  -deoblique :apply obliquity information to deoblique the input
              volume ('3dWarp -deoblique -wsinc5 ...'), as an initial step.
              This might help when data sets are very... oblique.

  -giant_move :when starting the initial alignment to the template,
              apply the same parameter expansions to 3dAllineate that
              align_epi_anat.py does with the same option flag.  This
              might be useful if the brain has a very large angle away
              from "typical" ones, etc.

  -unifize_off :(opt) don't start with a 3dUnifize command to try reduce
              effects of brightness inhomogeneities.  Probably only
              useful if unifizing has been previously performed on the
              input dset.

  -aniso_off :(opt) don't preprocess with a 3danisosmooth command to
              try reduce effects of weird things (in a technical
              sense).  Possible that this will never be used in the
              history of running this program.

  -init_skullstr_off :(opt) don't preprocess with a 3dSkullstrip command
              to roughly isolated brain in the beginning.  This might
              be useful with macaque dsets.

  -SSopt 'strings' :(opt) The content of 'strings' (which should be
              in quotes if there are any blanks) is copied to the
              end of the 3dSkullStrip command line. Example:
                -SSopt '-o_ply Fred.Is.Wonderful'
              to have 3dSkullStrip produce a .ply surface file
              as an additional output.

  -verb      :(opt) Apply the '-verb' option to 3dQwarp, to get more
              verbose progress information - mostly used for debugging.

  -noclean   :(opt) Do not delete the 'junk' files at the end of
              computations - mostly used for debugging and testing.

# -----------------------------------------------------------------

REFERENCE DATASETS ~1~

If you are reading this message, then several reference data sets
(base volumes) for @SSwarper now exist within the AFNI realm. Oh, what
a time it is to be alive.  A current list includes:

+ MNI152_2009_template_SSW.nii.gz
+ TT_N27_SSW.nii.gz
+ HaskinsPeds_NL_template1.0_SSW.nii.gz

Some of these are distributed with the AFNI binaries, and other may be
found online. You can make other reference base templates in whatever
space you prefer, but note that it must have several subvolumes of
information included-- see NOTES on the 'The Template Dataset', below
(which also contains a link to the @SSwarper template tutorial online
help).

# ----------------------------------------------------------------------

OUTPUTS ~1~

Suppose the -prefix is 'sub007' (because you scanned Bond, JamesBond?).
Then the outputs from this script will be"

  anatDO.sub007.nii       = deobliqued version of original dataset;
                            (*only if* using '-deoblique' opt)
  anatU.sub007.nii        = intensity uniform-ized original dataset;
                            (or, if '-unifize_off' used, a copy of orig dset)
  anatUA.sub007.nii       = anisotropically smoothed version of the above
                            (or, if '-aniso_off' used, a copy of anatU.*.nii)
  anatS.sub007.nii        = first pass skull-stripped original dataset;
                            (or, if '-init_skullstr_off' used, a copy of
                            anatUA.*.nii)
  anatSS.sub007.nii       = second pass skull-stripped original dataset;
  anatQQ.sub007.nii       = skull-stripped dataset nonlinearly warped to
                            the base template space;
  anatQQ.sub007.aff12.1D  = affine matrix to transform original dataset
                            to base template space;
  anatQQ.sub007_WARP.nii  = incremental warp from affine transformation
                            to nonlinearly aligned dataset;
  AMsub007.jpg            = 3x3 snapshot image of the anatQQ.sub007.nii
                            dataset with the edges from the base template
                            overlaid -- to check the alignment;
  MAsub007.jpg            = similar to the above, with the roles of the
                            template and the anatomical datasets reversed.

* The .aff12.1D and _WARP.nii transformations need to be catenated to get
  the full warp from orginal space to the base space; example:
    3dNwarpApply -nwarp 'anatQQ.sub007_WARP.nii anatQQ.sub007.aff12.1D' ...

* It is important to examine (at least) the two .jpg snapshot images to
  make sure that the skull-stripping and nonlinear warping worked well.

* The inputs needed for the '-tlrc_NL_warped_dsets' option to afni_proc.py
  are (in this order):
    anatQQ.sub007.nii anatQQ.sub007.aff12.1D anatQQ.sub007_WARP.nii

* When B-O-B uses this script for skull-stripping plus warping, He
  gives afni_proc.py these options (among others), after running
  ${this_prog} successfully -- here, 'subj' is the subject
  identifier:

  |  set btemplate = MNI152_2009_template_SSW.nii.gz
  |  set tpath = \`@FindAfniDsetPath \${btemplate}\`
  |  if( "$tpath" == "" ) exit 1
  |
  |  afni_proc.py                                                  \
  |    [...other stuff here: processing blocks, options...]        \
  |    -copy_anat anatSS.\${subj}.nii                               \
  |    -anat_has_skull no                                          \
  |    -align_opts_aea -ginormous_move -deoblique on -cost lpc+ZZ  \
  |    -volreg_align_to MIN_OUTLIER                                \
  |    -volreg_align_e2a                                           \
  |    -volreg_tlrc_warp -tlrc_base $tpath/$btemplate              \
  |    -tlrc_NL_warp                                               \
  |    -tlrc_NL_warped_dsets                                       \
  |       anatQQ.\${subj}.nii                                       \
  |       anatQQ.\${subj}.aff12.1D                                  \
  |       anatQQ.\${subj}_WARP.nii

# -------------------------------------------------------------------

NOTES ~1~

The Template dataset ~2~

  Any reference base template dataset, such as
  MNI152_2009_template_SSW.nii.gz, must have the first *4* volumes here
  (and can have the optional 5th for later uses, as described):
    [0] = skull-stripped template brain volume
    [1] = skull-on template brain volume
    [2] = weight mask for nonlinear registration, with the
          brain given greater weight than the skull
    [3] = binary mask for the brain
    [4] = binary mask for gray matter plus some CSF (slightly dilated)
          ++ this volume is not used in this script
          ++ it is intended for use in restricting FMRI analyses
             to the 'interesting' parts of the brain
          ++ this mask should be resampled to your EPI spatial
             resolution (see program 3dfractionize), and then
             combined with a mask from your experiment reflecting
             your EPI brain coverage (see program 3dmask_tool).

  More information about making these (with scripts) is provided on
  the Interweb:
    https://afni.nimh.nih.gov/pub/dist/doc/htmldoc/template_atlas/sswarper_base.html

You Know My Methods, Watson ~2~

  #1: Uniform-ize the input dataset's intensity via 3dUnifize.
       ==> anatU.sub007.nii
  #2: Strip the skull with 3dSkullStrip, with mildly agressive settings.
       ==> anatS.sub007.nii
  #3: Nonlinearly warp (3dQwarp) the result from #1 to the skull-on
      template, driving the warping to a medium level of refinement.
  #4: Use a slightly dilated brain mask from the template to
      crop off the non-brain tissue resulting from #3 (3dcalc).
  #5: Warp the output of #4 back to original anatomical space,
      along with the template brain mask, and combine those
      with the output of #2 to get a better skull-stripped
      result in original space (3dNwarpApply and 3dcalc).
       ==> anatSS.sub007.nii
  #6  Restart the nonlinear warping, registering the output
      of #5 to the skull-off template brain volume (3dQwarp).
       ==> anatQQ.sub007.nii (et cetera)
  #7  Use @snapshot_volreg3 to make the pretty pictures.
       ==> AMsub007.jpg and MAsub007.jpg

Temporary files ~2~

  If the script crashes for some reason, it might leave behind files
  whose names start with 'junk.SSwarper' -- you should delete these
  files manually.

# -------------------------------------------------------
  Author: Bob, Bob, there is one Bob, He spells it B-O-B.
# -------------------------------------------------------

EOF

   goto GOOD_EXIT

SHOW_VERSION:
   echo "version  $version (${rev_dat})"
   goto GOOD_EXIT

FAIL_MISSING_ARG:
    echo "** ERROR! Missing an argument after option flag: '$argv[$ac]'"
    goto BAD_EXIT

BAD_EXIT:
    exit 1

GOOD_EXIT:
    exit 0
